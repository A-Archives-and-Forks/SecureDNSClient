<Button x:Class="MsmhToolsWpfClass.WpfButton"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:local="clr-namespace:MsmhToolsWpfClass"
        xmlns:themes="clr-namespace:MsmhToolsWpfClass.Themes"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance local:WpfButton, IsDesignTimeCreatable=True}">

    <Button.Resources>
        <Storyboard x:Key="RippleEffect">
            <!-- Visibility -->
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.Visibility)" Duration="0:0:0.5">
                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Hidden}"/>
            </ObjectAnimationUsingKeyFrames>

            <!-- Scale Animation -->
            <DoubleAnimationUsingKeyFrames x:Name="AnimScaleX" Storyboard.TargetProperty="(Ellipse.RenderTransform).(ScaleTransform.ScaleX)" Duration="0:0:0.5">
                <LinearDoubleKeyFrame KeyTime="100%" Value="{Binding GetAnimScale}"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames x:Name="AnimScaleY" Storyboard.TargetProperty="(Ellipse.RenderTransform).(ScaleTransform.ScaleY)" Duration="0:0:0.5">
                <LinearDoubleKeyFrame KeyTime="100%" Value="{Binding GetAnimScale}"/>
            </DoubleAnimationUsingKeyFrames>

            <!-- Opacity Animation -->
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.Opacity)" Duration="0:0:0.5">
                <LinearDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
                <LinearDoubleKeyFrame KeyTime="0:0:0.5" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
    </Button.Resources>

    <Button.Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Content" Value="WpfButton"/>
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static themes:AppTheme.DodgerBlueBrushTransparent}}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AppTheme.BorderBrush}}"/>
            <Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AppTheme.BorderThickness}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AppTheme.ForegroundBrush}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Padding" Value="8,4,8,4"/>
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <!-- Outer Border -->
                        <Border x:Name="OuterBorder" BorderThickness="0"
                                CornerRadius="{Binding CornerRadius}">
                            <Border.Clip>
                                <RectangleGeometry x:Name="XNameIsNecessaryToAvoidDataBindingBug"
                                    RadiusX="{Binding CornerRadius, Converter={x:Static local:CornerRadiusToRectangleRadiusConverter.Instance}}"
                                    RadiusY="{Binding CornerRadius, Converter={x:Static local:CornerRadiusToRectangleRadiusConverter.Instance}}">
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{local:SizeToRectMultiConverter}">
                                            <Binding Path="ActualWidth" ElementName="OuterBorder"/>
                                            <Binding Path="ActualHeight" ElementName="OuterBorder"/>
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </Border.Clip>

                            <!-- Ripple Grid -->
                            <Grid x:Name="PART_Grid"
                                    Width="{TemplateBinding Width}"
                                    Height="{TemplateBinding Height}"
                                    HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                    Background="Transparent">

                                <!-- Main Border -->
                                <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        TextBlock.Foreground="{TemplateBinding Foreground}"
                                        CornerRadius="{Binding CornerRadius}">
                                    <Viewbox Stretch="{Binding Stretch}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                        <Grid>
                                            <!-- Hidden Text -->
                                            <TextBlock x:Name="PART_HiddenTextBlock" Text="XXX" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Hidden" Opacity="0"/>
                                            <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Focusable="False" RecognizesAccessKey="True"/>
                                        </Grid>
                                        <!--<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Focusable="False">
                                            <Image x:Name="PART_Image" Stretch="Uniform" Focusable="False"
                                                   Source="{Binding Path=Image, TargetNullValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type local:WpfButton}}}"
                                                   Margin="{Binding Path=ImageMargin, RelativeSource={RelativeSource AncestorType={x:Type local:WpfButton}}}"
                                                   Height="{Binding Path=ActualHeight, ElementName=PART_Content}"
                                                   RenderOptions.EdgeMode="Aliased" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            <TextBlock x:Name="PART_Content" VerticalAlignment="Center" Focusable="False" Text="{Binding Path=Content}"/>
                                        </StackPanel>-->
                                    </Viewbox>
                                </Border>

                                <!-- Ripple Canvas -->
                                <Canvas x:Name="PART_Canvas">
                                    <!-- Ripple Ellipse -->
                                    <Ellipse x:Name="PART_Ellipse"
                                             Width="10"
                                             Height="{Binding RelativeSource={RelativeSource Self}, Path=Width}"
                                             HorizontalAlignment="Center"
                                             VerticalAlignment="Center"
                                             Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:WpfButton}}, Path=RippleBrush}"
                                             Opacity="1"
                                             Visibility="Hidden"
                                             RenderTransformOrigin="0.5,0.5">
                                        <Ellipse.RenderTransform>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                </Canvas>
                            </Grid>
                        </Border>

                        <!-- Triggers -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" TargetName="Border" Value="{Binding MouseOverBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="IsDefault" Value="True"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AppTheme.MediumSeaGreenBrush}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="Border" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Button.Style>
    
</Button>
